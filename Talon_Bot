#!/usr/bin/perl

# Talon_Bot, a multipurpose bot for Twitch chat
my $version = '0.5.0-alpha';
# Copyright 2020, 2021 Michael Pirkola

# This program is free software: you can redistribute it and/or modify
# it under the terms of version 3 of the GNU Affero General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# This number should be changed to the current major.minor version number any
# time any change is made to the database format that is not fully forwards and
# backwards compatible with the previous parsing code.
my $dbVersion = '0.5';



use v5.20;

use lib './';
use Data::Dumper;
use IO::Socket::SSL;
use Text::Wrap qw(wrap);
use Getopt::Long;
use HTTP::Tiny;
use Digest::SHA qw(hmac_sha256_hex);
use JSON 'encode_json';
use Twitch;

$Data::Dumper::Terse = 1;

# Predeclare debug prototype.
sub debug ($$);

# This is how to run this program!
sub usage  {
	(my $text = <<"	#   END_HELP") =~ s/^\t#   //gm;
	#   Usage:
	#    $0 [options]
	#   
	#   $0 is a multipurpose bot for Twitch chat.
	#   
	#   Options:
	#       -h   --help         Print this help text
	#       -c   --config       Specify a config file other than .Talon_Bot.rc
	#       -t   --test         Don't connect to Twitch chat, just run interactively
	#       -d   --debug        Enable extra debug output
	#   
	#   END_HELP
	print $text;
	exit;
	}





##############
##  Config  ##
##############

# Make a list of places to check, until one is found.
# Talon_Bot will use the first available file from this list,
# unless a filename is given with --config.
my @configs = (
    'Talon_Bot.conf',
    '.Talon_Bot.conf',
    $ENV{'HOME'} . '/Talon_Bot.conf',
    $ENV{'HOME'} . '/.Talon_Bot.conf'
    );



# Set config defaults.
my %cfg = (
	source_code_url => 'https://github.com/edwinsage/Talon_Bot',
	host  => 'irc.chat.twitch.tv',
	port  => '6697',
	user  => 'Invalid!',
	auth  => 'Invalid!',
	width => '25',
	data_backups => '4',
	bot_color => '8A2BE2',
	user_color => 'BBBBBB',
	tempfile_units => 'units.tmp',
	unit_matrix_message => 'Not configured.  Please edit your Talon Bot config file.',
	
	data_file => 'data.db'
	);



# Parse command line options.
Getopt::Long::Configure("bundling");
my ( $config_file, $test , $debug );

GetOptions( "test|t" => \$test,
	    "config|c=s" => \$config_file,
	    "debug|d+" => \$debug,
	    "help|h" => \&usage
	    );



# Let's locate our config file.
# First priority is given to a command line argument.
# If that's not specified, we have to start looking.
my $found;
if ($config_file)  {
	# Note whether the file actually exists yet.
	# If not, we will create it later.
	$found = -e $config_file;
	}
else  {
	# Not specified, so we go looking.
	foreach (@configs)  {
		if ( -e $_ )  {
			$config_file = $_;
			$found = 1;
			last;
			}
		}
	}

if ($found)  {
	say "Using config file $config_file.";
	}
else  {
	# Create a new config file if none were found.
	# The block below contains the template for a new
	# config file, which will be filled with the default
	# config options specified above.
	
	# When writing a new file, default to a specified filename,
	# or the first choice in the list of filenames to check.
	$config_file = $configs[0] unless $config_file;
	say "Creating new config file $config_file.";
	open( CONFIG, '>', $config_file )
	    or die "Could not find or create config file.";
	print CONFIG <<"END_CONFIG";
# Settings for Talon_Bot
# Defaults are shown.  To run, user and auth must be set.
# Other options may be uncommented and changed.


#########################
##  Essential Config!  ##
#########################

# Talon_Bot requires a Twitch user to log in as.
user = $cfg{user}

# Twitch OAuth token.
auth = $cfg{auth}



#############
##  Files  ##
#############

# Log file to save all chat messages to.
#chatlog = $cfg{chatlog}

# Log file for raw IRC traffic.  Useful for debugging.
#rawlog = $cfg{rawlog}

# Persistent storage for units data.
#data_file = $cfg{data_file}

# Temporary file for units code.
#tempfile_units = $cfg{tempfile_units}



#####################
##  Other Options  ##
#####################

# Specify the Twitch chat channel to connect to.
# Default is to match the username.
#channel = $cfg{channel}

# Width of terminal output.
#width = $cfg{width}

# Default color for bot messages on terminal output.
#bot_color = $cfg{bot_color}

# Default color for user messages on terminal output.
# Overridden if the user has set a color.
#user_color = $cfg{user_color}

# Host and port of the Twitch IRC server.
# These should not need changing.
#host = $cfg{host}
#port = $cfg{port}

# Location of the source code for the bot.  If you make changes to the software,
# you must host the code somewhere and change this link to point to it.
#source_code_url = $cfg{source_code_url}

# When saving the database, old data can be backed up inside the data file.
# This specifies how many old versions should be retained.
#data_backups = 4



#########################
##  StreamTaffy Setup  ##
#########################
# StreamTaffy is overlay software for streams.
# https://github.com/edwinsage/StreamTaffy

# The URL your instance of StreamTaffy is listening on for Twitch events.
#streamtaffy_listener_url = 

# The secret chosen to verify subscription events.
#streamtaffy_secret = 



###################
##  Unit Config  ##
###################

# If this option is uncommented, then only the listed unit files will load.
# The default is to load all available unit files.
#unit_whitelist = rule, shout, vote

# Any unit files listed here will never be loaded.
#unit_blacklist = 



# The message to display for the !matrix command.
#unit_matrix_message = $cfg{unit_matrix_message}

END_CONFIG
	close CONFIG;
	chmod 0600, $config_file
	    or warn "Could not set permissions on $config_file.";
	say "You will need to edit at least the user and " . 
	    "auth lines to be able to connect to Twitch.";
	}



# Read config from file.
open ( FILE, $config_file ) or die "Could not find $config_file";
while (<FILE>)  {
	# Skip comments and blank lines
	next if ( /^\s*#/ or /^\s*$/ );
	chomp;
	# Remove leading and trailing spaces
	s/^\s*(.*?)\s*/$1/;
	die "Config file error: line $_ unparseable in $config_file.\n" unless /=/;
	my ( $key, $value ) = split /\s*=\s*/;
	$cfg{$key} = $value;
	}
close FILE;



# Check essential options
unless ($test)  {
	die "'user' not set in $config_file!" if ( $cfg{user} eq 'Invalid!' );
	die "'auth' not set in $config_file!" if ( $cfg{auth} eq 'Invalid!' );
	}



# Handle channel name
$cfg{channel} = $cfg{user} unless $cfg{channel};
$cfg{channel} = '#' . $cfg{channel} unless ( $cfg{channel} =~ /^#/ );



# Open log files, if configured.
if ( $cfg{rawlog} )  {
	open ( RAWLOG, ">>", $cfg{rawlog} )
	  or die "Could not open $cfg{rawlog} for appending.";
	RAWLOG->autoflush(1);
	}
if ( $cfg{chatlog} )  {
	open ( LOG, ">>", $cfg{chatlog} )
	  or die "Could not open $cfg{chatlog} for appending.";
	LOG->autoflush(1);
	}



# Make a list of builtin commands.
my %builtin_commands = (
	units => \&units,
	commands => \&commands,
	license => \&license,
	help => \&help
	);



# Initialize global variables.
$Text::Wrap::columns = $cfg{width};
my %help;
my %data;
my $time;
my $lastdump;
my %units;
my %user_commands;

# Load data file
&load_data;




# Create the connection handle.
$cfg{handle} = HTTP::Tiny->new( verify_SSL => 'true' );


#foreach ('app_access_token', 'user_access_token', 'user_refresh_token')  {
foreach (keys %{$data{core}})  {
	$cfg{$_} = $data{core}{$_} if $data{core}{$_};
	}





#############
##  Units  ##
#############

# Find unit files.
my @unit_files = <units/*.unit>;
my %available_units;
debug 1,"Unit files: " . join (', ', @unit_files);


# Build the list of units to load.

# Add all existing unit files.
foreach my $file (@unit_files)  {
	my ($namespace) = $file =~ /(\w+)\.unit$/;
	unless ( $namespace )  {
		warn "Invalid unit name $file.  Units must be named using only"
		    ."alphanumeric characters and underscore.  Skipping...";
		next;
		}
	$available_units{$namespace} = 1;
	}

# 'core' is not a valid unit name.
if ($available_units{core})  {
	warn "Unable to load unit: 'core' is a reserved name.";
	delete $available_units{core};
	}

# Check for whitelisting.
if (defined $cfg{unit_whitelist})  {
	my @white = split /,\s*/, $cfg{unit_whitelist};
	my %whitelist;
	# This line actually makes a hash:
	@whitelist{@white} = (1) x @white;
	foreach (keys %available_units)  {
		next if $whitelist{$_};
		debug 1,"Unit $_ is not on whitelist, skipping...";
		delete $available_units{$_};
		}
	}

# Check for blacklisting.
foreach (split /,\s*/, $cfg{unit_blacklist})  {
	next unless $available_units{$_};
	debug 1,"Unit $_ is blacklisted, skipping...";
	delete $available_units{$_};
	}

# Load all units that passed muster.
&load_unit($_) foreach (sort keys %available_units);








##################
##  Connection  ##
##################

my $sock;
unless ($test)  {
	# Using SSL, because PLAINTEXT BAD
	$sock = IO::Socket::SSL->new("$cfg{host}:$cfg{port}")
	    or die "Can't open socket: $@";
	
	
	say 'Logging in.';
	say $sock "PASS oauth:$cfg{auth}";
	say $sock "NICK $cfg{user}";
	say $sock "JOIN $cfg{channel}";
	
	say 'Looking for ACK.';
	my $first = <$sock>;
	say "$first YEAH!";
	die unless ( $first =~ /Welcome/ );
	
	say 'ACK received.';
	say $sock 'CAP REQ :twitch.tv/membership twitch.tv/tags twitch.tv/commands';
	}
else  {
	say 'Running in test mode, not connecting to Twitch...';
	# Only load modules if needed.
	eval "use WrapHandles;use Symbol";
	$sock = Symbol::gensym;
	# The following lets us use STDIN and STDOUT like a socket.
	tie *$sock, 'WrapHandles', \*STDIN, \*STDOUT;
	}

# Signal handling, for clean exiting.
$SIG{INT}  = \&signal_handler;
$SIG{TERM}  = \&signal_handler;


# Move login output offscreen
print "\n" x 25;







#################
##  Main Loop  ##
#################

while ( <$sock> )  {
	if ( /^PING :tmi.twitch.tv/ )  {
		say $sock 'PONG :tmi.twitch.tv';
		next;
		}
	$time = &timestamp;
	
	
	print RAWLOG "$time $_" if $cfg{rawlog};
	
	# Parse received messages.   (@tag1=;tag2=meep ):(user)!user@user.tmi.twitch.tv  (PRIVMSG) #chan        ' :' (msg)
	my ( $tags, $user, $cmd, $msg ) = /^(@.*? )?:(?:(\w+)!)?(?:\w+@\w+.)?tmi.twitch.tv (\w+) $cfg{channel}(?: :)?(.*)?\r\n/;
	
	# Easy CLI testing version:
	if ($test)  {
		$tags = '@badges=broadcaster;color=#FF0000;display-name=TESTING;fake=yup;user-id=1234567890';
		$cmd = "PRIVMSG";
		$user = "$cfg{user}";
		$msg = $_;
		}
	
	# Parse tags.
	$tags =~ s/^@//;
	my @tags = split /;/, $tags;
	# Convert $tags to a hash reference
	$tags = {};
	foreach ( @tags )  {
		# Remove trailing spaces
		s/\s+$//;
		# Remove leading spaces
		s/^\s+//;
		unless ( /=/ )  {
			warn "Tag parsing error: $_ unparseable.";
			next;
			}
		my ( $key, $value ) = split /\s*=\s*/;
		$$tags{$key} = $value;
		}
	
	# Replace the username with display name if it exists.
	$user = $$tags{'display-name'} if $$tags{'display-name'};
	my $user_id = $$tags{'user-id'};
	
	
	if ( $cmd eq 'PRIVMSG' )  {
		# Print message.
		&term_out( $user, $tags, $msg );
		
		# Log chat messages.
		print LOG "$time $user: $msg\n" if $cfg{chatlog};
		#say "Message: $msg";
		# Look for a command.
		if ( $msg =~ /^!(\w+)\s*(\S.*)?/ )  {
			my ( $c, $args ) = ($1, $2);
			#say $c, $args;
			$c = lc $c;
			# Handle builtin commands.
			if ($builtin_commands{$c})  {
				&{$builtin_commands{$c}}( $user, $user_id, $tags, $args, \%cfg );
				}
			else  {
				my $found;
				# Look for a matching unit command.
				foreach my $unit (keys %units)  {
					next unless (defined $units{$unit}{cmd}{$c}
					    and ref $units{$unit}{cmd}{$c}{code});
					# Execute command if it is found.
					&{$units{$unit}{cmd}{$c}{code}}( $user, $user_id, $tags, $msg, \%cfg, $args );
					$found = 1;
					last;
					}
				# If no unit command was found,
				# check for user commands.
				if (  !$found
				  and $data{core}{cmd}{$c}
				  and (&admin_test($tags)
				     or (time - $data{core}{cmd}{$c}{lastrun} >= $data{core}{cmd}{$c}{attr}{cd})
				     )
				   )  {
					my $message = $data{core}{cmd}{$c}{text};
					
					# Increment count.
					$data{core}{cmd}{$c}{count}++;
					
					
					# Replace variables.
					$message =~ s/\$\(query\)/$args/g;
					$message =~ s/\$\(user\)/$user/g;
					$message =~ s/\$\(count\)/$data{core}{cmd}{$c}{count}/g;
					
					&chat($message);
					
					# Update the last run time.
					$data{core}{cmd}{$c}{lastrun} = time;
					}
				
				
				}
			}
		
		
		
		}
	
	# Check all triggers for matches
	foreach my $unit (keys %units)  {
		foreach my $trigger (@{$units{$unit}{trigger}})  {
			debug 2,"Testing trigger $$trigger{test}";
			my $result = eval $$trigger{test};
			debug 1,"Trigger $$trigger{test} failed to run: $@" unless defined $result;
			&{$$trigger{code}}( $user, $user_id, $tags, $msg, \%cfg ) if $result;
			}
		
		
		}
	
	
	
	}



&logoff;





################
##  Commands  ##
################

sub units  {
	# Show loaded units
	# Enable and disable units
	# Reload unit files
	my ($user, $user_id, $tags, $args) = @_;
	
	# Admin only
	return unless &admin_test($tags);
	
	if ($args eq 'help')  {
		&chat("Advanced Usage: !units activate/deactivate/reload [unit1] [unit2...]"
		    . " -- Activate, deactivate, or reload a unit file.");
		return;
		}
	elsif ($args =~ /^activate\s+(.*)/)  {
		my @list = split /\s+/, $1;
		foreach my $unit (@list)  {
			if ( &load_unit($unit) )  {
				&chat("Unit $unit loaded.");
				}
			else  {
				&chat("Could not load unit $unit.");
				}
			}
		
		# Only display default text if no units were listed.
		return if @list;
		}
	elsif ($args =~ /^deactivate\s+(.*)/)  {
		my @list = split /\s+/, $1;
		foreach my $unit (@list)  {
			&unload_unit($unit);
			}
		
		# Only display default text if no units were listed.
		return if @list;
		}
	elsif ($args =~ /^reload\s+(.*)/)  {
		my @list = split /\s+/, $1;
		foreach my $unit (@list)  {
			&unload_unit($unit);
			if ( &load_unit($unit) )  {
				&chat("Unit $unit loaded.");
				}
			else  {
				&chat("Could not load unit $unit.");
				}
			}
		
		# Only display default text if no units were listed.
		return if @list;
		
		
		}
	
	# Make a list of unloaded but available units.
	my @list;
	foreach (keys %available_units)  {
		push @list, $_ unless defined $units{$_};
		}
	my $message = 'Currently loaded units: ' . join (', ', sort keys %units);
	$message .= '.  Available units: '
	    . join (', ', sort @list)
	    . '.'
	    if @list;
	&chat($message);
	}



sub commands  {
	my ($user, $user_id, $tags, $args) = @_;
	
	
	if ($args eq 'help' or $args eq '')  {
		&chat("Full list of available commands: !"
		    . join ( ', !', sort keys %{ &get_commands } ) );
		return;
		}
	
	
	# Admin only
	return unless &admin_test($tags);
	
	#if ( my ($attr, $command, $text) = $args =~ /^add\s+([\w=,]*)\s*(!(\w+)\s+(.*)/i)  {
	if ( my ($name, $attr, $text) = $args =~ /^add\s+!(\w+)((?:\s+-\w+=\w+)*)\s+(.*)/i)  {
		# All commands should be lowercase.
		$name = lc $name;
		
		
		# Parse attributes.
		my %attr;
		# Remove leading space.
		$attr =~ s/^\s+//;
		foreach (split /\s+/, $attr)  {
			/(\w+)=(\w+)/;
			$attr{$1} = $2;
			}
		
		if (defined $data{core}{cmd}{$name})  {
			&chat("Command modified.");
			}
		else  {
			&chat("Command created.");
			}
		&add_command($name, $text, \%attr);
		
		
		}
	elsif ( my ($name) = $args =~ /^delete\s+!(\w+)/i)  {
		if (defined $data{core}{cmd}{$name})  {
			&delete_command ($name);
			&chat("Command !$name deleted.");
			}
		else  {
			&chat("Command not found.");
			}
		}
	#elsif ( my ($attr, $command, $text) = $args =~ /^edit\s+([\w=,]*)\s*(!(\w+)\s+(.*)/i)  {
	
	}



sub license  {
	&chat("Talon_Bot version $version - This software is distributed under the terms of the " .
	      "GNU Affero General Public License.  " .
	      "This means that you, the user, have the right to download, modify, and run the " .
	      "software yourself if you wish, under the same terms.  " .
	      "Source code is available at $cfg{source_code_url}");
	
	
	}



sub help  {
	my ( $user, $user_id, $tags, $args ) = @_;
	# Get rid of ! if needed.
	$args =~ s/^\!//;
	
	
	if ($args eq 'units')  {
		&units($user, $user_id, $tags, 'help');
		return;
		}
	if ($args eq 'commands')  {
		&commands($user, $user_id, $tags, 'help');
		return;
		}
	elsif ($args eq 'license')  {
		&license;
		return;
		}
	elsif ( $args ne 'help' )  {
		# Check each unit for an existing command.
		my $found;
		foreach my $unit (keys %units)  {
			debug 3,"Checking unit $unit";
			if (defined $units{$unit}{cmd}{$args})  {
				$found = $unit;
				debug 2,"Command $args found in $unit.";
				last;
				}
			}
		if ($found)  {
			&chat($_) foreach @{$units{$found}{cmd}{$args}{help}};
			if (&admin_test($tags))  {
				&chat($_) foreach @{$units{$found}{cmd}{$args}{help_plus}};
				}
			return;
			}
		}
	# Default help
	debug 3, \%units;
	
	# Limit the listed commands to core and unit primary commands.
	my $list = &get_commands;
	foreach ( keys %$list )  {
		delete $$list{$_}
		  if $$list{$_}{type} ne 'unit' and $$list{$_}{type} ne 'core';
		}
	
	&chat("Available commands: !"
	    . join ( ', !', sort (keys %$list) )
	    . ".  For more information on a specific command, type '!help [command]'.");
	}




#######################
##  Other Functions  ##
#######################

sub load_unit  {
	# Gets passed the name of a unit, without the .unit ending.
	my $unit = $_[0];
	
	# Check to make sure the unit is on the approved list.
	unless ($available_units{$unit})  {
		debug 1,"Attempting to load unit $unit, but it is not on the list of available units!";
		return;
		}
	
	# This hash will contain the supplementary material generated by the unit file.
	my %unit;
	
	my $file = 'units/' . $unit . '.unit';
	unless (open ( UNIT, "<", "$file" ))  {
		warn "Could not open unit file $file for reading: $!";
		return;
		}
	
	# Shlorp in the file by sections.
	my @shlorp;
	my @output;
	UNIT_FILE: while ( <UNIT> )  {
		debug 2,"Line read from unit file";
		# Skip checks if we're at the end.
		debug 3, "Check1";
		# Ignore blank lines.
		next if ( /^\s*$/ and !eof );
		chomp;
		push ( @shlorp, $_ );
		
		debug 3,"Check2";
		# Get one block at a time.
		next unless ( /^\&\&$/ or eof );
		
		debug 3,"Check3";
		# Get rid of the ampersands.
		pop @shlorp if /^\&\&$/;
		
		debug 2,"Shlorped";
		# Make sure we got something.
		next unless @shlorp;
		
		debug 2,"@shlorp";
		# Right now there are only command sections.
		# More parsing will come later.
		
		# Parse commands
		my @commands;  # Holds the primary command name in
		               # the first slot, and aliases after.
		my @triggers;
		my @help;
		my @help_plus;
		
		# Make sure there is actually a code block.
		my $code_found;
		
		# Peel off lines until we hit the code block.
		while (my $line = shift @shlorp)  {
			next if $line =~ /^\s*$/;
			
			if ( $line =~ /^Code:/ )  {
				debug 2,"Code block start";
				$code_found = 1;
				last;
				}
			elsif ( $line =~ /^Help: (.*)/ )  {
				push @help, $1;
				}
			elsif ( $line =~ /^Help\+: (.*)/ )  {
				push @help_plus, $1;
				}
			elsif ( my ($cmd) = $line =~ /^Command: (.*)/ )  {
				
				my @keys = split ( /,?\s+/, $cmd );
				foreach (@keys)  {
					s/^!//;
					tr/A-Z/a-z/;
					# For now, no special characters.
					unless ( /^\w+$/ )  {
						warn "Invalid command name '$_'.  Skipping...";
						next;
						}
					push @commands, $_;
					}
				}
			elsif ( $line =~ /^Trigger: (.*)/ )  {
				push (@triggers, $1);
				}
			# No unspecified headers
			#elsif ( /(.*?): (.*)/ ) {
			#	$header{$1} = $2;
			#	debug 3,"Header $1 = $2";
			#	}
			else  {
				#!# This needs a far better diagnostic message.
				warn "In unit file $file, could not parse line:\n\t$line\nSkipping $file...";
				last;
				}
			
			
			}
		
		# Check for duplicate command names.
		&resolve_existing_commands(\@commands);
		
		
		# Basic checks.  Does this unit have the bare minimum?
		unless ( $code_found and (@commands or @triggers) )  {
			# Another bad error message.
			warn "Block in $file is not loadable.";
			@shlorp = ();
			next;
			}
		
		
		# Process the code block.
		# Create the subroutine.
		debug 1, "Pushing subroutine to output";
		push @output, "\$tempsub = sub  {\n\t"
		    . 'my ( $user, $user_id, $tags, $msg, $cfg, $args ) = @_;'
		    . "\n";
		
		foreach (@shlorp)  {
			# Translate simplified variables to proper ones
			s/([\$\%]\{?)VARS/$1hash{vars}/g;
			s/([\$\%]\{?)DATA/$1hash{data}/g;
			
			
			push @output, "\t$_\n";
			}
		push @output, "\t};\n\n";
		@shlorp = ();
		
		
		# Add entries for commands and triggers.
		my $repeat;  # Track duplicate commands
		foreach (@commands)  {
			push @output, '$hash{cmd}{' . $_ . '}{code} = $tempsub;' . "\n";
			if ($repeat)  {
				push @output, '$hash{cmd}{' . $_ . "}{dup_of} = '$repeat';\n";
				}
			else  {
				$repeat = $_;
				}
			
			# Add extras to %unit
			$unit{$_}{help} = \@help;
			$unit{$_}{help_plus} = \@help_plus;
			}
		foreach (@triggers)  {
			# push (@{$hash{trigger}}, {test => '$msg =~ /a/', code => $tempsub});
			push @output, 'push (@{$hash{trigger}}, {test => \'' . $_ . '\', code => $tempsub});' . "\n";
			}
		
		push @output, '$tempsub = undef;' ."\n\n\n";
		
		}
	close UNIT;
	
	# Initialize the temporary file.
	unless (open ( TEMPUNIT, ">", $cfg{tempfile_units} ))  {
		warn "Could not open $cfg{tempfile_units} for writing: $!";
		return;
		}
	print TEMPUNIT "# Unit $unit\nuse v5.20;\n\n" . 'my %hash;' . "\n" . 'my $tempsub;' . "\n\n";
	
	print TEMPUNIT foreach @output;
	# If everything works, this should be the return value.
	print TEMPUNIT "\nreturn \\\%hash;\n";
	close TEMPUNIT;
	
	# Run the unit temp file
	my $hashref = do $cfg{tempfile_units};
	if (ref $hashref)  {
		debug 1,"Loaded $cfg{tempfile_units} successfully.";
		}
	else  {
		warn "Couldn't parse $cfg{tempfile_units}: $@" if $@;
		warn "Couldn't do $cfg{tempfile_units}: $!" unless defined $hashref;
		warn "Couldn't run $cfg{tempfile_units}";
		return;
		}
	
	# Load the global %units hash with the hashref.
	$units{$unit} = $hashref;
	
	# Add supplementary data.
	foreach my $cmd (keys %unit)  {
		$units{$unit}{cmd}{$cmd}{$_} = $unit{$cmd}{$_} foreach keys %{$unit{$cmd}};
		}
	
	# Link existing data into place.
	$units{$unit}{data}{$_} = $data{$unit}{$_} foreach keys %{$data{$unit}};
	
	# Signal success.
	return 1;
	}



sub unload_unit  {
	my $unit = $_[0];
	debug 2,"Attempting to unload unit $unit.";
	# Check if unit is loaded.
	unless (defined $units{$unit})  {
		&chat("Unit $unit is not loaded!");
		return;
		}
	
	# Store any data that was in the unit.
	$data{$unit} = $units{$unit}{data};
	
	# Remove the unit from memory.
	delete $units{$unit};
	}



sub load_data  {
	my ($major_ver, $minor_ver) = $version =~ /^(\d+)\.(\d+)/;
	
	# First check if the data file exists.
	return unless ( -e $cfg{data_file} );
	
	
	# try to load the database.
	open (IN, '<', $cfg{data_file})
	    or die "Could not open data file $cfg{data_file} for reading.";
	
	# Get database version requirement from the first line only.
	my $version_line = <IN>;
	chomp $version_line;
	
	my ($req_version) = $version_line =~ /^v(\d+\.\d+)/;
	
	die "Could not read version string from data file $cfg{data_file}"
	    unless $version_line =~ /^v(\d+)\.(\d+)/;
	
	die "Database file $cfg{data_file} needs Talon_Bot version $req_version.0 or "
	    ."better to read it.  Current version is only $version."
	    if ($major_ver < $1 or $minor_ver < $2);
	
	# Read in lines until we get to the end of the block.
	my @database;
	while (my $line = <IN>)  {
		# We don't care about backups here.
		last if $line =~ /^\&\&/;
		
		push @database, $line;
		}
	close(IN);
	
	# Clear the old database, if it existed.
	%data = ();
	
	# Old code first.
	if ($req_version < 0.1)  {
		# Put old database loading method here.
		# 0.1 and 0.2 databases can be read by 0.3 rules.
		}
	elsif ($req_version < 0.5)  {  # Previous version: 0.3
		foreach my $line (@database)  {
			chomp $line;
			# All lines should match this pattern.
			# There should be no funny business here.
			my ($unit, $key, $value) = $line =~ /^([\w_]+):([\w_]+): (.*)$/
			    or die "Error reading database file $cfg{data_file}.  Line not parseable:\n$line";
			
			# Store the data.
			$data{$unit}{$key} = $value;
			
			}
		}
	else  {  # Current version: 0.5
		# Now using Data::Dumper to handle this cleanly.
		
		%data = %{eval join '', @database};
		}
	}



sub dump_data  {
	my @old;
	my $read_fail;
	
	# Get data from loaded units.
	$data{$_} = $units{$_}{data} foreach keys %units;
	
	# Update tokens from $cfg.
	foreach ('app_access_token', 'user_access_token', 'user_refresh_token')  {
		$data{core}{$_} = $cfg{$_} if $cfg{$_};
		}
	
	# Load in up to the last X entries as backup
	if (-e $cfg{data_file})  {
		unless ( open (IN, '<', $cfg{data_file}) )  {
			warn "Unable to open $cfg{data_file} for updating.\n";
			$read_fail = 1;
			}
		
		my $entry;
		while (<IN>)  {
			unless (/^\&\&/)  {
				# Add the line to the current entry.
				$entry .= $_;
				next unless eof;
				}
			# Otherwise, push the whole entry to the list.
			push @old, $entry;
			$entry = '';
			# Stop at the configured value.
			last if (@old >= $cfg{data_backups});
			}
		
		close IN;
		}
	
	
	unless ( open (OUT, '>', "$cfg{data_file}.tmp") )  {
		warn "Unable to write to $cfg{data_file}.tmp\n";
		return;
		}
	# We don't need the current version,
	# we need the last time the database format was changed.
	my $time = &timestamp;
	print OUT "v$dbVersion - written $time\n";
	
	debug 2,'Writing %data to file';
	print OUT Dumper \%data;
	
	# Append old data as backup.
	print OUT "&&\n$_" foreach ( @old );
	
	
	unless ( close(OUT) )  {
		warn "Warning: couldn't complete save to $cfg{data_file}.tmp!";
		return;
		}
	
	# Don't replace the old file if there was a read error.
	if ($read_fail)  {
		# Try renaming?
		if ( rename $cfg{data_file}, "$cfg{data_file}.old" )  {
			debug 1, "Renamed old database, as it could not be read for prepending.";
			}
		else  {
			# This is all bad news and a sign something went very wrong.
			# so we'll not be too thorough in handling it.
			warn "Database file not replaced.  Leaving as $cfg{data_file}.tmp ...";
			return;
			}
		}
	
	
	if ( rename "$cfg{data_file}.tmp", $cfg{data_file} )  {
		debug 1, "Dumped data to file.";
		$lastdump = time;
		}
	else  {
		warn "Could not replace old data file $cfg{data_file}";
		}
	
	}



sub resolve_existing_commands  {
	# This should probably be replaced entirely
	# in favor of using &get_commands
	
	# Check for duplicate command names.
	# Accepts an array reference which may be modified.
	my $commands = $_[0];
	
	##++##  This could use some CS improvement, for sure.
	CHECK: foreach my $u (keys %units)  {
		foreach my $cmd (keys %{$units{$u}{cmd}})  {
			
			if ( $cmd eq $$commands[0] )  {
				# If the duplicate is an alias, remove it.
				if ( defined $units{$u}{cmd}{$cmd}{dup_of} )  {
					delete $units{$u}{cmd}{$cmd};
					
					}
				# If not, drop a warning and skip the command.
				else {
					warn "Command $cmd already exists in unit $u.  Skipping...";
					@$commands = ();
					}
				# There should be no existing duplicates.
				last CHECK;
				}
			
			}
		
		}
	}



sub get_commands  {
	my %list;
	
	# First add all main commands.
	$list{$_}{type} = 'core' foreach keys %builtin_commands;
	
	# Add unit commands.
	foreach my $unit (keys %units)  {
		foreach (keys %{$units{$unit}{cmd}})  {
			# Skip existing commands (which shouldn't exist anyway).
			next if $list{$_};
			
			$list{$_}{unit} = $unit;
			if (defined $units{$unit}{cmd}{$_}{dup_of})  {
				$list{$_}{type} = 'alias';
				$list{$_}{dup_of} = $units{$unit}{cmd}{$_}{dup_of};
				}
			else  {
				$list{$_}{type} = 'unit';
				}
			}
		}
	
	# Add user commands last.
	foreach ( keys %{ $data{core}{cmd} } )  {
		# Skip existing commands (which CAN happen with user commands).
		next if $list{$_};
		
		$list{$_}{type} = 'user';
		$list{$_}{attr} = $data{core}{cmd}{$_}{attr};
		}
	
	
	return \%list;
	}



sub add_command  {
	my ($name, $text, $attr) = @_;
	# All commands should be lowercase.
	$name = lc $name;
	
	my %cmd = (text => $text);
	
	# Maybe this should include a check to make sure
	# attr is a flat hash reference?
	$cmd{attr} = $attr if $attr;
	
	$data{core}{cmd}{lc $name} = \%cmd;
	}



sub delete_command  {
	my ($name) = @_;
	$name = lc $name;
	
	if ( defined $data{core}{cmd}{$name} )  {
		debug 1,"Removing user command $name";
		delete $data{core}{cmd}{$name};
		}
	else  {
		debug 1,"Trying to remove user command $name, but it does not exist";
		}
	}



sub term_out  {
	my ( $user, $tags, $msg ) = @_;
	my $status;
	# Check for mod status
	$status = '*' if &admin_test($tags);
	
	# Get user color.
	my ( $cr, $cg, $cb ) = $$tags{color} =~ /#(..)(..)(..)/;
	$cr = substr( $cfg{user_color}, 0, 2 ) unless defined $cr;
	$cg = substr( $cfg{user_color}, 2, 2 ) unless defined $cg;
	$cb = substr( $cfg{user_color}, 4, 2 ) unless defined $cb;
	
	# Decimal conversion
	$cr = hex $cr;
	$cg = hex $cg;
	$cb = hex $cb;
	
	# Wrap message text
	$msg = wrap(' ', ' ', $msg);
	
	# Print message.
	#print '\033[38;2;' . "$cr;$cg;${cb}m$user" . '\033[0m: ' . "$msg\n";
	print "$status\e[38;2;$cr;$cg;${cb}m$user\e[0m:\n$msg\n";
	}



sub send_overlay_event  {
	my ($type, $event_hash) = @_;
	
	# Make sure we're equipped to send events.
	unless ( $cfg{streamtaffy_listener_url} )  {
		warn "Overlay events not possible without streamtaffy_listener_url set!";
		return;
		}
	unless ( $cfg{streamtaffy_secret} )  {
		warn "Overlay events not possible without streamtaffy_secret set!";
		return;
		}
	
	# Create an ID
	my $id = "Talon_Bot" . sprintf ( "%08d", int(rand(100000000)) );
	
	# Create timestamp
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime();
	my $time = sprintf ( "%d-%02d-%02dT%02d:%02d:%02d.00000000Z", ($year + 1900, $mon + 1, $mday, $hour, $min, $sec) );
	# Create payload
	my %json_data = (
		subscription => {
			id => $id,
			status => "enabled",
			type => "custom.$type",
			transport => {
				method => "webhook",
				callback => $cfg{streamtaffy_listener_url}
				}
			},
		event => $event_hash
		);
	
	my $content = encode_json \%json_data;
	my $digest = hmac_sha256_hex($id . $time . $content, $cfg{streamtaffy_secret});
	debug 1,$content;
	
	my $headers;
	$$headers{'Content-Length'} = length $content; # NOT UNICODE SAFE
	$$headers{'Content-Type'} = 'application/json';
	$$headers{'Twitch-Eventsub-Message-Id'} = $id;
	$$headers{'Twitch-Eventsub-Message-Signature'} = "sha256=$digest";
	$$headers{'Twitch-Eventsub-Message-Timestamp'} = $time;
	$$headers{'Twitch-Eventsub-Subscription-Type'} = "custom.$type";
	$$headers{'Twitch-Eventsub-Message-Type'} = 'notification';
	
	my $res = HTTP::Tiny->new->request(
	    'POST',
	    $cfg{streamtaffy_listener_url},
	    {headers => $headers,
	     content => $content}
	    );
	
	
	
	unless ($$res{success})  {
		warn "Overlay event not accepted!";
		debug 1,$res;
		}
	
	}



sub chat  {
	my ( $msg ) = @_;
	say $sock "PRIVMSG $cfg{channel} :$msg" if defined $sock;
	&term_out( $cfg{user},
	    { color => "#$cfg{bot_color}", badges => 'moderator' }, $msg );
	print LOG "$time $cfg{user}: $msg\n" if $cfg{chatlog};
	}



sub whisper  {
	my ( $user, $msg ) = @_;
	say $sock "PRIVMSG $cfg{channel} :/w $user $msg";
	print LOG "$time $cfg{user}: /w $user $msg\n" if $cfg{chatlog};
	}



sub admin_test  {
	my ($tags) = @_;
	return 1 if ( $tags->{badges} =~ /(broadcaster|moderator)/ );
	return 0;
	}



sub timestamp  {
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime();
	return sprintf ( "%d\.%02d.%02d-%02d:%02d:%02d", ($year + 1900, $mon + 1, $mday, $hour, $min, $sec) );
	}



sub signal_handler  {
	say 'Logging off.';
	say $sock 'QUIT';
	&logoff;
	wait;
	exit;
	}



sub debug ($$)  {
	return unless $debug >= $_[0];
	my $msg = $_[1];
	$msg = Dumper($_[1]) if ref $_[1];
	print "DEBUG$_[0]: $msg\n";
	}



sub logoff  {
	&dump_data( \%cfg, $dbVersion );
	if ( $cfg{rawlog} )  {
		print RAWLOG "\n--\n\n";
		close RAWLOG
		  or warn "Could not close $cfg{rawlog}.";
		}
	if ( $cfg{chatlog} )  {
		print LOG"\n--\n\n";
		close LOG
		  or warn "Could not close $cfg{chatlog}.";
		}
	$sock->close();
	}
