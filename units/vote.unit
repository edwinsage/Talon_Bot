
Command: !vote !poll

Help: Usage: !vote, !vote <choice> [choice...] -- See the current poll, or vote in a poll.  To vote, simply type '!vote #', with # being the number for the choice you choose.  Some polls allow voting for more than one option; simply type each number seperated by a space, e.g. "!vote 1 3".|+|Advanced Usage: !vote new <prompt> 1) <text> 2) <text>... -- Create a new poll.  <prompt> will be displayed when a viewer types !vote.  Choices should be listed by number, as only numbers are accepted as votes.|Advanced Usage: !vote end -- End voting on the current poll.|Advanced Usage: !vote results -- Display the results of the last completed poll.|Advanced Usage: !vote save [-f] <name> -- Save a poll to be continued later.  Adding -f forces overwriting a previous saved poll.|Advanced Usage: !vote load <name> -- Loads a previously saved poll.|Advanced Usage: !vote list -- Lists saved polls.



Code:
# First run only
unless ($VARS{initialized})  {
	debug 1,"Initializing poll...";
	&sub_vote_load();
	${VARS{initialized}}++;
	}


# Handle creating a poll
if ( &admin_test($tags) and $args =~ /^new (.*)/i )  {
	# Set the poll prompt
	$VARS{poll} = $1;
	# Blank the votes
	$VARS{votes} = {};
	return;
	}

# Handle ending a poll
if ( &admin_test($tags) and $args =~ /^(end|stop)$/i )  {
	# Reset results
	$VARS{results} = {};
	
	# Stash the prompt
	$VARS{result} = $VARS{poll};
	
	# Tally votes
	foreach ( values %{$VARS{votes}} )  {
		my @raw = split /\s+/;
		# Check for duplicates
		my @votes;
		foreach (@raw)  {
			# Cap the value so the array doesn't get stupidly large
			next if ( $_ > 100 );
			$votes[$_]++;
			}
		for (my $i = 1; $i <= @votes; $i++)  {
			$VARS{results}{$i}++ if $votes[$i];
			}
		
		}
	
	$VARS{poll} = '';
	&chat('Voting closed.');
	return;
	}

# List saved polls
if ( &admin_test($tags) and $args eq 'list' )  {
	my $list;
	foreach (keys %{$DATA})  {
		next unless /^poll_(\w+)$/;
		$list .= "$1, ";
		}
	$list =~ s/, $//;
	
	&chat("Saved polls: $list");
	return;
	}


# Handle saving a poll
if ( &admin_test($tags) and $args =~ /^save\s*(-f)?\s+(\w*)$/i )  {
	my $name = $2;
	
	# Check for a name to save.
	unless ($name)  {
		&chat("You must give a name to save a poll as.  Type !vote save <name>.");
		return;
		}
	
	# Check for a current poll
	unless ($VARS{poll})  {
		&chat("No current poll.");
		return;
		}
	
	# Check for a prior saved poll
	if ($DATA{'poll_' . $name} and $1 ne '-f')  {
		&chat("A previous poll is saved with that name.  Use '!vote save -f <name>' to overwrite.");
		return;
		}
	
	&sub_vote_save($name);
	
	# Remove the current poll
	$VARS{poll} = '';
	&chat("Poll saved.  To restore it, type '!vote load $name'");
	
	
	return;
	}

# Handle loading a poll
if ( &admin_test($tags) and $args =~ /^load\s*(\w*)$/i )  {
	my $name = $1;
	
	# Check for a name to load.
	unless ($name)  {
		&chat("You must give a name of a saved poll to load.  Type !vote list to see saved polls.");
		return;
		}
	
	# Check for a saved poll
	unless ($DATA{'poll_' . $name})  {
		&chat("No saved poll with that name.  Type !vote list to see saved polls.");
		return;
		}
	
	# Check for a currently running poll
	if ($VARS{poll})  {
		&chat("A poll is currently running.  End it before loading a saved poll.");
		return;
		}
	
	# Unmarshall votes from storage
	&sub_vote_load($name);
	
	&chat("Poll restored.");
	
	
	return;
	}

# Handle displaying results
if ( &admin_test($tags) and $args =~ /^result(s)?$/i )  {
	&chat($VARS{result});
	my @ranking = sort { $VARS{results}{$b} <=> $VARS{results}{$a} } keys %{$VARS{results}};
	&chat("Choice $_: $VARS{results}{$_}") foreach @ranking;
	return;
	}

# That's all the admin commands
# If there is no current poll, stop here
unless ($VARS{poll})  {
	&chat("No current poll.");
	return;
	}

# Print the poll by default
unless ($args)  {
	my $message = "Current poll: $VARS{poll}";
	# Display current vote if user has voted.
	$message .= " Current vote for $user: $VARS{votes}{$tags->{'user-id'}}" if ($VARS{votes}{$tags->{"user-id"}});
	$message .= "  Total votes: " . int( keys %{$VARS{votes}} );
	&chat($message);
	return;
	}

# Only numbers and spaces allowed
unless ( $args =~ /^[\d\s]*$/ )  {
	&chat("Votes must only consist of numbers, separated by spaces.");
	return;
	}

# Store votes by user-id, to allow easy changing.
$VARS{votes}{$tags->{"user-id"}} = $args;
&sub_vote_save();
&chat("Vote received.");




###################
##  Subroutines  ##
###################


sub sub_vote_save  {
	# Did we get a name?
	my $name = '';
	$name = '_' . $_[0] if $_[0] =~ /^\w+$/;
	
	
	# Store the prompt
	$DATA{'poll' . $name} = $VARS{poll};
	
	# Marshall votes into a string
	my $votes;
	foreach (keys %{$VARS{votes}})  {
		debug 1,$_;
		my $uservote = $VARS{votes}{$_};
		# Remove whitespace from votes string
		$uservote =~ s/\s+/,/g;
		$votes .= "$_:$uservote ";
		
		}
	
	# Shave off the last space.
	$votes =~ s/ $//;
	
	# Store the result
	$DATA{'votes' . $name} = $votes;
	
	
	}



sub sub_vote_load  {
	# Did we get a name?
	my $name = '';
	$name = '_' . $_[0] if $_[0] =~ /^\w+$/;
	
	# Error check
	unless ($DATA{'poll' . $name})  {
		debug 1,"Poll poll_$name not found in database.";
		return;
		}
	
	# Load the prompt
	$VARS{poll} = $DATA{'poll' . $name};
	
	# Unmarshall votes from storage
	my $votes;
	foreach (split / /, $DATA{'votes' . $name})  {
		debug 1,$_;
		my ($user, $vote) = split /:/;
		
		# Put back the spaces
		$vote =~ s/,/ /g;
		
		$VARS{votes}{$user} = $vote;
		}
	
	# Remove the saved poll
	if ($name)  {
		delete $DATA{'poll' . $name};
		delete $DATA{'votes' . $name};
		}
	
	}

