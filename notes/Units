Talon_Bot uses a plugin system to load extra bits of functionality,
referred to as "units".  Each unit is a single file which can contain
multiple blocks.  Each block contains a code block, preceeded
by various headers that define when the code should be run.




Q: Should I let my users upload unit files to run on my bot?
A: No.  Unit code is not sandboxed in any way, and has full access to
   the system under the user that Talon_Bot is run as.  Never add unit files
   from untrusted sources.






Structure of units data:


%units        The core
    |
    |   Each unit file creates a reference to a hash
    |   which is stored under its name in %units
    |
    |
    *——— "some_unit_name"->\%hashref
    |     |
    |     *——— cmd
    |     |     |
    |     |     *——— "some_command_name"
    |     |     |     |
    |     |     |     *——— code -> anonymous sub reference with =sub
    |     |     |     |
    |     |     |     *——— help -> \@ help text lines
    |     |     |     |
    |     |     |     *——— help_plus -> \@ admin help lines
    |     |     |     |
    |     |     |     *——— dup_of -> $ name of main command, if this is an alias
    |     |     |
    |     |     |
    |     |     *——— "other_command"
    |     |     |     |
    |     |     |     same as above, maybe without dup_of
    |     |     |
    |     |     etc.
    |     |
    |     |
    |     *——— trigger->\@   List of triggers to test
    |     |     |
    |     |     *——— 0->\%
    |     |     |    |
    |     |     |    *— test -> "$msg =~ / pattern /i"
    |     |     |    |
    |     |     |    *— code -> anonymous sub reference
    |     |     |
    |     |     *——— 1
    |     |     |    same
    |     |     etc.
    |     |
    |     |
    |     *——— vars    Namespace for the unit to do what it wants while loaded
    |     |            Corresponds to %VARS in unit code
    |     |
    |     |
    |     *——— data    All key/value pairs in data will be saved and restored
    |           |      Corresponds to %DATA in unit code
    |           |
    |           *——— key -> value
    |           |
    |
    |
    *——— "another_unit_name"->\%hashref
    |

etc.
